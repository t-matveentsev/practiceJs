// Arrow function

// arrow() –≤–∏–∫–ª–∏–∫ –ø–µ—Ä–µ–¥ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º –¥–∞—î error
const arrow = () => {};
arrow();

const sum = (a, b) => a + b;
console.log(sum(5, 6));

const sum1 = (a, b) => {
  return a + b;
}; // —è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –∑ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º return —Ç–∞ —É —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–∫–∞—Ö
console.log(sum(5, 6));

const sum3 = (a) => a + 6;
console.log(sum3(5));

const foo = (...args) => console.log(args);

foo(1, 4, 5, 9, 5, 6);

// –£ –º–µ—Ç–æ–¥–∞—Ö –æ–± º—î–∫—Ç—É –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// Callback function

function add(a, b) {
  return a + b;
}
console.log(add(5, 8));

function addValue(a, b) {
  return a + b;
}

function sumValue(a, b) {
  return a * b;
}

// callback –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ñ–∞–∫—Ç–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—è —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç–∞ –≤–∏–¥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ–Ω—à–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
function fooCall(a, b, callback) {
  const result = callback(a, b);
  console.log(`Result is ${result}`);
  console.log(callback);
}

fooCall(4, 5, addValue); // –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó –∑ callback –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–µ—Ä–µ–¥–∞—î–º–æ –º–∞—Å–∏–≤ —Ç–∞ –Ω–∞–∑–≤—É —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫—É —Ç—Ä–µ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏
fooCall(4, 5, sumValue);
fooCall(4, 5, (a, b) => a + b);
fooCall(4, 5, (a, b) => a * b);

// forEach –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É

const arr = [2, 6, 4, 8, 9];

function customForEach(arr, callback) {
  for (let i = 0; i < arr.length; i += 1) {
    callback(arr[i], i, arr);
  }
}

customForEach(arr, callback);
function callback(elem, idx, array) {
  if (elem === 3) {
    array.splice(idx, 1);
  }
}

arr.forEach((elem, idx, array) => {
  if (elem === 8) {
    array.splice(idx, 1);
  }
});

console.log(arr);

arr
  .map((item) => item * item)
  .forEach((elem, idx, array) => console.log(array));

// Tasks

// Task 1

// –°—Ç–≤–æ—Ä–∏ —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é logItem(), —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤–∞, –∑—Ä–æ–±–∏ –ø–µ—Ä–µ–±—ñ—Ä –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach()

const logItems = (arr) =>
  arr.forEach((item, idx, arr) => console.log(`${idx + 1} - ${item}`));

logItems(["Mango", "Poly", "Ajax"]);
logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]);

// Task 2
// –ù–∞–ø–∏—à–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–± º—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î callback –ø–µ—Ä–µ–¥–∞—é—á—Ç –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–± º—î–∫—Ç
// logProduct(product) - callback –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–± º—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - callback, —â–æ –ø—Ä–∏–π–º–∞—î –æ–± º—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤—ñ—Ä—Å—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

function createProduct(obj, callback) {
  const product = {
    id: Date.now(),
    ...obj,
  };
  callback(product);
}

function logProduct(product) {
  console.log("Product:", product);
}

function logTotalPrice({ price, quantity }) {
  console.log(`Product total price ${price * quantity}`);
}

createProduct({ name: "Apple", price: 30, quantity: 3 }, logProduct);
createProduct({ name: "Apple", price: 30, quantity: 3 }, logTotalPrice);

createProduct({ name: "Lemon", price: 20, quantity: 3 }, logProduct);
createProduct({ name: "Lemon", price: 20, quantity: 3 }, logTotalPrice);

// Task 3
// –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
// 1 - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª
// 2 - —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –º–∞—î –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∫–æ–∂–µ–ª –µ–ª–µ–º–µ–Ω—Ç —è–∫–æ–≥–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è callback function

function each(arr, action) {
  const item = [];
  arr.forEach((elem) => item.push(action(elem)));
  return item;
}

console.log(each([64, 49, 36, 25, 16], (value) => value - 10));
console.log(each([64, 49, 36, 25, 16], (value) => value * 2));
console.log(each([64, 49, 36, 25, 16], (value) => Math.ceil(value)));
console.log(each([64, 49, 36, 25, 16], (value) => Math.floor(value)));

// Task 4
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getProductDetails, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä—É productId —Ç–∞ –¥–≤—ñ callbacks function successCallback —Ç–∞ erroeCallback. –§—É–Ω–∫—Ü—ñ—è getProductDetails –ø–æ–≤–∏–Ω–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—Ö —É successCallback. –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è errorCallback —ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.

const products = [
  {
    id: 1,
    name: "Phone",
    price: 10000,
    description: "Phone whith best display and god processor",
  },
  {
    id: 2,
    name: "Laptop",
    price: 25000,
    description: "Smart and strong laptop for work and games",
  },
  {
    id: 3,
    name: "Pad",
    price: 8000,
    description: "Compatibility pad for watch contant",
  },
];

function getProductDetails(id, success, error) {
  for (const product of products) {
    if (product.id === id) {
      success(product);
      return;
    }
  }
  error(id);
}

getProductDetails(2, handleSuccess, handleError);
getProductDetails(10, handleSuccess, handleError);

function handleSuccess(message) {
  console.log("Success!", message);
}

function handleError(productId) {
  console.log(`Error! product with id:${productId} not found`);
}

const users = [
  { id: 1, name: "John", age: 28, skills: ["JavaScript", "HTML", "CSS"] },
  { id: 2, name: "Alice", age: 32, skills: ["Python", "Data Analysis"] },
  { id: 3, name: "Bob", age: 24, skills: ["JavaScript", "React", "Node.js"] },
  { id: 4, name: "Emily", age: 40, skills: ["Java", "Spring"] },
  { id: 5, name: "Davis", age: 22, skills: ["C++", "C#"] },
];

// method map –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏–π –º–∞—Å–∏–≤, –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–∞–∫–æ—ó–∂ –¥–æ–≤–∂–∏–Ω–∏. –î–ª—è –π–æ–≥–æ —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç—ñ–ª—å–∫–∏ callback function

const names = users.map(({ name }, idx, arr) => name); // –ø—Ä–∞—Ü—é—î –∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—î—é. Idx —Ç–∞ arr –Ω–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ
console.log(names);

function customMap(arr) {
  const result = [];
  for (let i = 0; i < arr.length; i += 1) {
    result.push(arr[i].name);
  }
  return result;
}

console.log(customMap(users));

// method flatMap –º–µ—Ç–æ–¥ —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î —É–≤—ñ–π—Ç–∏ –Ω–∞ –æ–¥–Ω—É –≤–∫–ª–∞–¥–µ–Ω—ñ—Å—Ç—å —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–∞–∫ —Å–∞–º–æ –º–∞—Å–∏–≤ –¥–∞–Ω–Ω–∏—Ö

const skills = users.flatMap(({ skills }) => skills); // —î —Ç–∞–∫–æ–∂ method flat(deep)
console.log(skills);

// —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑–∞ –¥–æ–≤–æ–º–æ–≥–æ—é indexOf –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è flatMap

const uniqueSkills = skills.filter((skill, idx, arr) => {
  return arr.indexOf(skill) === idx;
});
console.log(uniqueSkills);

// method filter (—á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–∏–π –º–µ—Ç–æ–¥), —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —É–º–æ–≤–æ—é, –ø–æ–≤–µ—Ä—Ç–∞—î –æ–± º—î–∫—Ç —è–∫–∏–π –∑–∞–¥–æ–≤—ñ–ª—å–Ω—è—î —É–º–æ–≤—É

const ageUser = users
  .filter(({ age }, idx, arr) => age > 30)
  .map(({ name }) => name); // –ª–∏—à–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π
console.log(ageUser);

// method find –º–µ—Ç–æ–¥ —è–∫–∏–π —à—É–∫–∞—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —è–∫–∏–π –∑–∞–¥–æ–≤—ñ–ª—å–Ω—è—î —É–º–æ–≤—É

const searchSkill = users.find(({ skills }) => skills.includes("JavaScript"));
console.log(searchSkill);

// method findIndex –ø–æ–¥—ñ–±–Ω–∏–π –º–µ—Ç–æ–¥ –¥–æ indexOf –∞–ª–µ –ø—Ä–∞—Ü—é—î –Ω–µ –∑ –ø—Ä–∏–º—ñ—Ç–∏–≤–∞–º–∏ –∞ –∑ —Å–∫–ª–∞–¥–Ω–∏–º  —Ç–∏–ø–æ–º –¥–∞–Ω–Ω–∏—Ö, –ø–µ—Ä–µ—Ä–∏–≤–∞—î –ø–æ—à—É–∫ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É —è–∫–∏–π –∑–∞–¥–æ–≤—ñ–ª—å–Ω—è—î —É–º–æ–≤—É –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î -1

const index = users.findIndex(({ id }) => id === 3); // –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç—É —è–∫–∏–π —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏
console.log(index);

// some –ø—Ä–∞—Ü—é—î –ø–æ–¥—ñ–±–Ω–æ –¥–æ –º–µ—Ç–æ–¥—É includes, –∞–ª–µ –≤–º—ñ—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Å–∫–ª–∞–¥–Ω–∏–º —Ç–∏–ø–æ–º –¥–∞–Ω–Ω–∏—Ö –ø–æ–≤–µ—Ä—Ç–∞—î true –∞–±–æ false

const isKnow = users.some(({ skills }, idx, arr) => skills.includes("Python"));
console.log(isKnow);

// every –ø–µ—Ä–µ–≤—ñ—Ä—è—î —â–æ–± —É—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ—Ç–µ—Ä—É—î–º–æ–≥–æ –æ–± º—î–∫—Ç–∞ –∑–∞–¥–æ–≤—ñ–ª—å–Ω–∏–≤ —É–º–æ–≤—É, –ø–æ–≤–µ—Ä—Ç–∞–µ true or false

const oldAge = users.every(({ age }) => age > 20 && age < 50);
console.log(oldAge);

// method sort –º–µ—Ç–æ–¥ —è–∫–∏–π –º—É—Ç—É—î –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤

const sortUsers = [...users].sort((a, b) => a.age - b.age); // a - –ø–æ—Ç–æ—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç —ñ—Ç–µ—Ä–∞—Ü—ñ—ó, b - –Ω–∞—Ç—Å—É–ø–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç —ñ—Ç–µ—Ä–∞—Ü—ñ—ó // –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é spred –º–æ–∂–Ω–∞ –Ω–µ –º—É—Ç—É—é—á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –º–µ—Ç–æ–¥ –Ω–∞ –∫–æ–ø—ñ—ó
console.log(users);
console.log(sortUsers);

const sortName = [...users].sort((a, b) => a.name.localeCompare(b.name)); // —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é localCompare —Ä—è–¥–∫—ñ–≤ –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º
console.log(sortName);

// method reduce —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥

const totalAge = users.reduce((acc, { age }, idx, arr) => {
  // –ø–µ—Ä—à—ñ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ
  acc += age;
  return acc;
}, 0);
console.log(totalAge);

const allName = users.reduce((acc, { name }) => {
  acc.push(name);
  return acc;
}, []);
console.log(allName);

// Tasks

//Task 1
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ m–∞—Ä, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–± º—î–∫—Ç—ñ–≤, –≤ —è–∫–æ–º—É –±—É–¥–µ - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.

const students = [
  { name: "John", grades: [80, 85, 90] },
  { name: "Alice", grades: [90, 95, 92] },
  { name: "Bob", grades: [70, 80, 75] },
  { name: "Emily", grades: [95, 92, 88] },
  { name: "David", grades: [85, 88, 90] },
];

function getAverage(arr) {
  return arr.map(({ name, grades }) => {
    const total = grades.reduce((acc, item) => acc + item, 0);
    const obj = {
      name,
      averge: Math.round(total / grades.length),
    };
    return obj;
  });
}
console.log(getAverage(students));


// Task 2
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ filter, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∏ —è–∫—ñ —Å—Ç–∞—Ä—à–µ 20 —Ä–æ–∫—ñ–≤

const students2 = [
  { name: "John", age: 20, gpa: 3.8 },
  { name: "Alice", age: 21, gpa: 3.2 },
  { name: "Bob", age: 19, gpa: 3.5 },
  { name: "Emily", age: 22, gpa: 3.9 },
  { name: "David", age: 20, gpa: 3.7 },
];

function getAdult(arr) {
  return arr.filter(({ age }) => age > 20);
}
console.log(getAdult(students2));


// Task 3
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ find, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∫–Ω–∏–∂–∫—É –∑–∞ —ó—ó –Ω–∞–∑–≤–æ—é (title)

const books = [
  {
    title: "JavaScript:  The Good Parts",
    author: "Douglas Crockford",
    year: 2008,
  },
  {
    title: "Clean Code:  A Handbook of Agile Software Craftsmanship",
    author: "Robert C. Martin",
    year: 2008,
  },
  {
    title: "The Pragmatic Programmer:  Your Journey to Mastery",
    author: "Andrew Hunt, David Thomas",
    year: 1999,
  },
  {
    title: "Design Patterns: Elements of Reusable Object-Oriented Software",
    author: "Erich Gamma, RichardHelm, Ralph Johnson, John Vlissides",
    year: 1994,
  },
  {
    title: "Refactoring: Improving the Design of Existing Code",
    author: "Martin Fowler",
    year: 1999,
  },
];

function getBook(arr, title) {
  return arr.find(({ title: bookTitle }) => bookTitle === title) || "Not found";
}
console.log(
  getBook(
    books,
    "Design Patterns: Elements of Reusable Object-Oriented Software"
  )
);


// Task 4
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ reduce, —â–æ–± –æ–±—á–∏—Å–ª–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–∞—Å–∏–≤—ñ, —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —è–∫ –¥–æ–±—É—Ç–æ–∫ —Ü—ñ–Ω–∏ —Ç–æ–≤–∞—Ä—É –Ω–∞ –π–æ–≥–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –∞ –ø–æ—Ç—ñ–º —Å—É–º—É—î—Ç—å—Å—è –∑ —ñ–Ω—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–æ—é –≤–∞—Ä—Ç—ñ—Å—Ç—é –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤.

const products2 = [
  { id: 1, name: "T-shirt", price: 20, quantity: 3 },
  { id: 2, name: "Jeans", price: 50, quantity: 2 },
  { id: 3, name: "Sneakers", price: 80, quantity: 1 },
  { id: 4, name: "Hat", price: 15, quantity: 4 },
  { id: 5, name: "Socks", price: 5, quantity: 6 },
];

function getTotal(arr) {
  // const total = arr.reduce((acc, product) => {
  //   acc += product.price * product.quantity
  //   return acc
  // }, 0);
  // return total
  return arr.reduce((acc, {price, quantity}) => acc += price * quantity, 0);
}
console.log(getTotal(products2));


// Task 5
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ sort, —â–æ–± –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–Ω–∏–∂–∫–∏ –∑–∞ —Ä–æ–∫–æ–º - –≤–∏–¥–∞–Ω–Ω—è —É —Å–ø–∞–¥–∞—é—á–æ–º—É –ø–æ—Ä—è–¥–∫—É. –†–µ–∑—É–ª—å—Ç–∞—Ç‚Ä¢ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–º –º–∞—Å–∏–≤–æ–º –∫–Ω–∏–∂–æ–∫ –∑–∞ - —Ä–æ–∫–æ–º –≤–∏–¥–∞–Ω–Ω—è.

const books2 = [
  { title: 'JavaScript: The Good Parts', author: 'Douglas Crockford', year: 2008 },
  { title: 'Clean Code: A Handbook of Agile Software Craftsmanship', author: 'Robert Martin', year: 2009 },
  { title: 'The Pragmatic Programmer: Your Journey to Mastery', author: 'Andrew Hunt, David Thomas', year: 1999 },
  { title: 'Design Patterns: Elements of Reusable Object-Oriented Software', author: 'Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides', year: 1994 },
  { title: 'Refactoring: Improving the Design of Existing Code', author: 'Martin Fowler', year: 1999 } 
];

function bookSort (arr) {
  return [...arr].sort((a, b) => b.year - a.year)
    // .map(({ author, year }) => ({ author, year }));
}
console.log(bookSort(books2));

// Task 6
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—É —Ç–∞—Ä —Ç–∞ filter, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Å–∏–≤ –Ω–∞–∑–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —Ü—ñ–Ω–∞ —è–∫–∏—Ö –º–µ–Ω—à–µ 2 –¥–æ–ª–∞—Ä—ñ–≤ —Ç–∞ –≤—ñ–¥—Å–æ—Ä—Ç—É–π —ó—Ö –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º.

const products3 = [
  { id: 1, name: 'Apple', price: 1.99 },
  { id: 2, name: 'Banana', price: 0.99 },
  { id: 3, name: 'Orange', price: 2.49 },
  { id: 4, name: 'Grapes', price: 3.99 },
];


function getProducts (arr) {
  return arr.filter(({ price }) => price < 2)
    .map(({ name }) => name)
    .sort((a, b) => a.localeCompare(b));
}

console.log(getProducts(products3));

// Task 7
// ‚Ç¨ —Ä—è–¥–æ–∫ –≤ —è–∫–æ–º—É –¥–æ–≤—ñ–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç–µ—Ä, –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤ —Ä—è–¥–∫—É –Ω–µ–º–∞—î –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ —Ä–æ–∑–¥—ñ–ª–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ–± º—î–∫—Ç –¥–µ –∫–æ–∂–Ω–∞ –ª—ñ—Ç–µ—Ä–∞ –±—É–¥–µ –∫–ª—é—á–µ–º, –∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤ —è–∫—É –≤–æ–Ω–∞ –¥—É–±–ª—é—î—Ç—å—Å—è –±—É–¥–µ - –∑–Ω–∞—á–µ–Ω–Ω—è–º - –∫–ª—é—á–∞ (interview)

const str = 'adafehfwsnfakjsbvlkbav';
const obj = str.split('') // —Ä–æ–∑–±–∏–≤–∞—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ –º–∞—Å–∏–≤
  .reduce((acc, item) => {
    if (acc.hasOwnProperty(item)) { // —á–∏ —î —Ç–∞–∫–∏–π –∫–ª—é—á true or false
      acc[item] += 1 // —è–∫—â–æ —î –∑–±—ñ–ª—å—à—É—î–º–æ –π–æ–≥–æ –Ω–∞ 1
    } else {
      acc[item] = 1 // —è–∫—â–æ –Ω–µ–º–∞—î –∫–ª—é—á–∞ –ø–æ—Ç—Ä–∞–≤–ª—è—î–º–æ —É false —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ
    }
    return acc
  }, {})
console.log(obj);