// Arrow function

// arrow() –≤–∏–∫–ª–∏–∫ –ø–µ—Ä–µ–¥ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º –¥–∞—î error
const arrow = () => { }
arrow()

const sum = (a, b) => a + b
console.log(sum(5, 6));

const sum1 = (a, b) => { return a + b } // —è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –∑ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º return —Ç–∞ —É —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–∫–∞—Ö
console.log(sum(5, 6));

const sum3 = a => a + 6
console.log(sum3(5));

const foo = (...args) => console.log(args);

foo(1, 4, 5, 9, 5, 6)

// –£ –º–µ—Ç–æ–¥–∞—Ö –æ–± º—î–∫—Ç—É –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó


// Callback function

function add(a, b) {
    return a + b
}
console.log(add(5, 8));

function addValue(a, b) {
    return a + b
}

function sumValue(a, b) {
    return a * b
}

// callback –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ñ–∞–∫—Ç–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—è —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç–∞ –≤–∏–¥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ–Ω—à–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
function fooCall(a, b, callback) { 
    const result = callback(a, b)
    console.log(`Result is ${result}`);
    console.log(callback);
}

fooCall(4, 5, addValue); // –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó –∑ callback –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–µ—Ä–µ–¥–∞—î–º–æ –º–∞—Å–∏–≤ —Ç–∞ –Ω–∞–∑–≤—É —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫—É —Ç—Ä–µ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏
fooCall(4, 5, sumValue)
fooCall(4, 5, (a, b) => a + b)
fooCall(4, 5, (a, b) => a * b)


// forEach –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É

const arr = [2, 6, 4, 8, 9];

function customForEach(arr, callback) {
    for (let i = 0; i< arr.length; i += 1) {
      callback(arr[i], i, arr)
    }
}

customForEach(arr, callback)
function callback(elem, idx, array) {
    if (elem === 3) {
        array.splice(idx, 1)
    }
}

arr.forEach((elem, idx, array) => {
    if (elem === 8) {
      array.splice(idx, 1);
    }
})

console.log(arr);

arr.map((item) => item * item).forEach((elem, idx, array) => console.log(array))

// Tasks

// Task 1

// –°—Ç–≤–æ—Ä–∏ —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é logItem(), —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤–∞, –∑—Ä–æ–±–∏ –ø–µ—Ä–µ–±—ñ—Ä –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach()


const logItems = arr => arr.forEach((item, idx, arr) => console.log(`${idx + 1} - ${item}`))


logItems(['Mango', 'Poly', 'Ajax'])
logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã'])

// Task 2
// –ù–∞–ø–∏—à–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–± º—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î callback –ø–µ—Ä–µ–¥–∞—é—á—Ç –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–± º—î–∫—Ç
// logProduct(product) - callback –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–± º—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - callback, —â–æ –ø—Ä–∏–π–º–∞—î –æ–± º—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤—ñ—Ä—Å—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å


function createProduct(obj, callback) {
    const product = {
        id: Date.now(),
        ...obj
    }
    callback(product)
}

function logProduct(product) {
    console.log('Product:', product);
}

function logTotalPrice({ price, quantity }) {
    console.log(`Product total price ${price * quantity}`);
}

createProduct({ name: "Apple", price: 30, quantity: 3 }, logProduct);
createProduct({ name: "Apple", price: 30, quantity: 3 }, logTotalPrice);

createProduct({ name: "Lemon", price: 20, quantity: 3 }, logProduct);
createProduct({ name: "Lemon", price: 20, quantity: 3 }, logTotalPrice);

// Task 3
// –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
// 1 - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª
// 2 - —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –º–∞—î –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∫–æ–∂–µ–ª –µ–ª–µ–º–µ–Ω—Ç —è–∫–æ–≥–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è callback function


function each(arr, action) {
    const item = [];
    arr.forEach( elem => item.push(action(elem)))
    return item
}

console.log(each([64, 49, 36, 25, 16], value =>  value - 10));
console.log(each([64, 49, 36, 25, 16], value =>  value * 2));
console.log(each([64, 49, 36, 25, 16], value =>  Math.ceil(value)));
console.log(each([64, 49, 36, 25, 16], value =>  Math.floor(value)));


// Task 4
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getProductDetails, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä—É productId —Ç–∞ –¥–≤—ñ callbacks function successCallback —Ç–∞ erroeCallback. –§—É–Ω–∫—Ü—ñ—è getProductDetails –ø–æ–≤–∏–Ω–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—Ö —É successCallback. –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è errorCallback —ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.

const products = [
    {
    id: 1,
    name: "Phone",
    price: 10000,
    description: "Phone whith best display and god processor"
    },
    {
    id: 2,
    name: 'Laptop',
    price: 25000,
    description: 'Smart and strong laptop for work and games'
    },
    {
    id: 3,
    name: 'Pad',
    price: 8000,
    description: 'Compatibility pad for watch contant'
    }] 

function getProductDetails(id, success, error) {
    for (const product of products) {
        if (product.id === id) {
            success(product);
            return;
        }
    }
    error(id)
};

getProductDetails(2, handleSuccess, handleError)
getProductDetails(10, handleSuccess, handleError)

function handleSuccess(message) {
    console.log('Success!', message);
};

function handleError(productId) {
    console.log(`Error! product with id:${productId} not found`);
}